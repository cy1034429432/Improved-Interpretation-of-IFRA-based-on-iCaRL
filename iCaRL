# icarl 导入模型
from avalanche.models import IcarlNet, make_icarl_net, initialize_icarl_net
# 导入插件
from avalanche.training.plugins.lr_scheduling import LRSchedulerPlugin
from avalanche.training.plugins import EvaluationPlugin
from avalanche.evaluation.metrics import forgetting_metrics, \
accuracy_metrics, loss_metrics, timing_metrics,  \
confusion_matrix_metrics, disk_usage_metrics, accuracy

from avalanche.logging import InteractiveLogger, TensorboardLogger

# 使用一些现成的包对做好数据集
from avalanche.benchmarks.utils import ImageFolder
from avalanche.benchmarks.generators import nc_benchmark
from avalanche.training.strategies import ICaRL
import torchvision
from torchvision import transforms
# 读进度条
from tqdm import tqdm
# 模型训练
import torch
from torch.optim import SGD, Adam
from torch.optim.lr_scheduler import MultiStepLR
# 其他的一些常用的包
import numpy as np
import random



# 图片预处理
def get_dataset_per_pixel_mean(dataset):
    result = None
    patterns_count = 0

    for img_pattern, _ in dataset:
        if result is None:
            result = torch.zeros_like(img_pattern, dtype=torch.float)

        result += img_pattern
        patterns_count += 1

    if result is None:
        result = torch.empty(0, dtype=torch.float)
    else:
        result = result / patterns_count

    return result


def icarl_mydata_augment_data(img):
    img = img.numpy()
    padded = np.pad(img, ((0, 0), (4, 4), (4, 4)), mode="constant")
    random_cropped = np.zeros(img.shape, dtype=np.float32)
    crop = np.random.randint(0, high=8 + 1, size=(2,))

    # Cropping and possible flipping
    if np.random.randint(2) > 0:
        random_cropped[:, :, :] = padded[
            :, crop[0] : (crop[0] + 32), crop[1] : (crop[1] + 32)
        ]
    else:
        random_cropped[:, :, :] = padded[
            :, crop[0] : (crop[0] + 32), crop[1] : (crop[1] + 32)
        ][:, :, ::-1]
    t = torch.tensor(random_cropped)
    return t


# 设置一些参数使用的魔法方法
class Config(dict):
    def __getattribute__(self, key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(key)

    def __setattr__(self, key, value):
        self[key] = value


def run_experiment(config):
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

    torch.manual_seed(config.seed)
    torch.cuda.manual_seed(config.seed)
    np.random.seed(config.seed)
    random.seed(config.seed)
    torch.backends.cudnn.enabled = False
    torch.backends.cudnn.deterministic = True


    # 预处理使用的transform
    transform_pretrained = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
    ])

    per_pixel_mean = get_dataset_per_pixel_mean(
        ImageFolder(root=r'.\IFRA_data(liner)', transform=transform_pretrained)
        )

    # 处理之后的transform
    transform_train = transforms.Compose([transforms.Resize((32,32)),
                                    transforms.ToTensor(),
                                    lambda img_pattern: img_pattern - per_pixel_mean,
                                    icarl_mydata_augment_data,
                                    ])

    transform_test = transforms.Compose([transforms.Resize((32, 32)),
                                            transforms.ToTensor(),
                                            lambda img_pattern: img_pattern - per_pixel_mean,
                                          ])


    IFRA_train = ImageFolder(root=r'.\IFRA_data(liner)', transform=transform_train)
    IFRA_test = ImageFolder(root=r'.\IFRA_data(liner)_test', transform=transform_test)


    scenario = nc_benchmark(
        train_dataset=IFRA_train,
        test_dataset=IFRA_test,
        n_experiences=config.nb_exp,
        task_labels=False,
        seed=config.seed,
        shuffle=True,
    )

    evaluator = EvaluationPlugin(
        accuracy_metrics(minibatch=True, epoch=True, experience=True, stream=True),
        loss_metrics(minibatch=True, epoch=True, experience=True, stream=True),
        timing_metrics(epoch=True, epoch_running=True),
        forgetting_metrics(experience=True, stream=True),
        confusion_matrix_metrics(num_classes=scenario.n_classes, save_image=True,
                                 stream=True),

        loggers = [InteractiveLogger(), TensorboardLogger()],
        benchmark = scenario
    )

    model: IcarlNet = make_icarl_net(num_classes=9)
    model.apply(initialize_icarl_net)

    optim = SGD(
        model.parameters(),
        lr=config.lr_base,
        weight_decay=config.wght_decay,
        momentum=0.9,
    )
    sched = LRSchedulerPlugin(
        MultiStepLR(optim, config.lr_milestones, gamma=1.0 / config.lr_factor)
    )

    strategy = ICaRL(
        model.feature_extractor,
        model.classifier,
        optim,
        config.memory_size,
        buffer_transform=transforms.Compose([icarl_mydata_augment_data]),
        fixed_memory=True,
        train_mb_size=config.batch_size,
        train_epochs=config.epochs,
        eval_mb_size=config.batch_size,
        plugins=[sched],
        device=device,
        evaluator=evaluator,
    )

    for i, exp in enumerate(scenario.train_stream):
        eval_exps = [e for e in scenario.test_stream][: i + 1]
        strategy.train(exp, num_workers=0)
        strategy.eval(eval_exps, num_workers=0)


if __name__ == '__main__':
    config = Config()

    # 初始化一些参数
    config.batch_size = 128
    config.nb_exp = 1
    config.memory_size = 900
    config.epochs = 70
    config.lr_base = 2
    config.lr_milestones = [49, 63]
    config.lr_factor = 4.0
    config.weight_decay = 0.00001
    config.seed = 1234
    run_experiment(config)

